openapi: 3.1.0
info:
  title: go-bpmn HTTP API
  version: {{.version}}
  description: >
    API to interact with a process engine via HTTP.
  license:
    name: MIT
    url: https://github.com/gclaussn/go-bpmn/blob/master/LICENSE
  contact:
    name: GitHub Issues
    url: https://github.com/gclaussn/go-bpmn/issues
tags:
  - name: Elements
    description: |
      An element represents a BPMN element of a process.
  - name: Element instances
    description: >
      An element instance is an instance of a BPMN element in the scope of an process instance.
  - name: Events
  - name: Incidents
    description: >
      An incident represents a failed job or task, which has no more retries left.
      An incident is related to either a job or a task.
  - name: Jobs
    description: >
      A job is a unit of work related to an element instance, which must be locked, executed and completed by a worker.
  - name: Processes
    description: >
      A process represents a BPMN process that consists of a set of BPMN elements.
  - name: Process instances
    description: >
      A process instance is an instance of a BPMN process.
  - name: Tasks
    description: >
      A task is a unit of work, which must be locked, executed and completed by an engine.
  - name: Variables
    description: >
      A variable is data, identified by a name, that exists in the scope of a process instance or element instance.
servers:
  - url: http://127.0.0.1:8080
    description: Default configuration
paths:
{{- range $path, $methods := .paths}}
  {{$path}}:
  {{- range $method, $operation := $methods}}
    {{$method}}:
      operationId: {{$operation.Id}}
    {{- if ne $operation.Id "checkReadiness" }}
      security:
        - ApiKeyAuth: []
    {{- end }}
    {{- if $operation.Parameters}}
      parameters:
      {{- range $parameterName := $operation.Parameters }}
        - $ref: "#/components/parameters/{{$parameterName}}"
      {{- end }}
    {{- end}}
      {{- includeOperation $operation.Id | indent 6}}
  {{- end}}
{{end}}
components:
  securitySchemes:
    ApiKeyAuth:
      description: API key based authentication and authoriation.
      type: apiKey
      in: header
      name: Authorization
  parameters:
{{- range $parameterName, $_ := .parameters}}
    {{$parameterName}}:
      name: {{$parameterName}}
      {{- includeParameter $parameterName | indent 6}}
{{end}}
  schemas:
{{- range $schemaName, $schema := .schemas}}
    {{ $schemaName }}:
      description: >
        {{- or $schema.Description "" | indent 8}}
      type: {{$schema.Type}}
      {{- $required := $schema.Required}}
  {{- if $required}}
      required:
    {{- range $required}}
        - {{.}}
    {{- end}}
  {{- end}}
  {{- if $schema.Enum}}
      enum:
    {{- range $value := $schema.Enum}}
        - {{$value}}
    {{- end}}
  {{- end}}
  {{- if $schema.Properties}}
      properties:
    {{- range $property := $schema.Properties}}
        {{$property.Name}}:
      {{- if not $property.TypeReference}}
          description: >
            {{- or $property.Description "" | indent 12}}
          type: {{$property.Type}}
        {{- if $property.Format}}
          format: {{$property.Format}}
        {{- end}}
        {{- if $property.PropertyNamesPattern}}
          propertyNames:
            pattern: "{{$property.PropertyNamesPattern}}"
        {{- end}}
        {{- if $property.AdditionalPropertiesType}}
          additionalProperties:
            type: {{$property.AdditionalPropertiesType}}
        {{- end}}
        {{- if $property.AdditionalPropertiesTypeReference}}
          additionalProperties:
            $ref: "#/components/schemas/{{$property.AdditionalPropertiesTypeReference | stripPackage}}"
        {{- end}}
        {{- if $property.Items}}
          items:
          {{- if not $property.Items.TypeReference}}
            type: {{$property.Items.Type}}
            {{- if $property.Items.Format}}
            format: {{$property.Items.Format}}
            {{- end}}
          {{- end}}
          {{- if $property.Items.TypeReference}}
            $ref: "#/components/schemas/{{$property.Items.TypeReference | stripPackage}}"
          {{- end}}
        {{- end}}
        {{- if ne $property.Maximum -1}}
          maximum: {{$property.Maximum}}
        {{- end}}
        {{- if $property.MaxItems}}
          maxItems: {{$property.MaxItems}}
        {{- end}}
        {{- if ne $property.Minimum -1}}
          minimum: {{$property.Minimum}}
        {{- end}}
        {{- if $property.MinItems}}
          minItems: {{$property.MinItems}}
        {{- end}}
        {{- if $property.UniqueItems}}
          uniqueItems: {{$property.UniqueItems}}
        {{- end}}
      {{- end}}
      {{- if $property.TypeReference}}
          $ref: "#/components/schemas/{{$property.TypeReference | stripPackage}}"
      {{- end}}
    {{- end}}
  {{- end}}
{{end}}
  examples:
    QueryLimitProblem:
      summary: Invalid query limit
      value:
        status: 400
        type: HTTP_REQUEST_URI
        title: invalid query parameter limit
        detail: failed to parse value -1
    QueryOffsetProblem:
      summary: Invalid query offset
      value:
        status: 400
        type: HTTP_REQUEST_URI
        title: invalid query parameter offset
        detail: failed to parse value -1
